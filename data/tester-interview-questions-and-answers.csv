question;answer
What is Quality Assurance?;Quality assurance aims to ensure that the generated software complies with all the requirements and specifications in the SRS document.
How is Quality Assurance different from Software testing?;Quality Assurance confirms that the developed software complies with all specifications, including SRS, FRS, and BRS. It is a deliberate testing process evaluation method to increase the production of high-quality goods. QA develops strategies to avert potential bugs during the software development process. It focuses mainly on management-related topics, such as project analysis, checklists, and development processes and techniques. Software testing is a method of investigating a system to see how it functions and look for potential flaws. The product is tested using various techniques to identify bugs and determine if they have been removed.
Define the purpose of QA in Software Development.;QA’s Roles And Responsibilities: Defining test objectives and the strategy for achieving them. Developing a test strategy based on the specifications and timelines of the project. Executing tests using the appropriate methods (manually or with test execution tools) and recording test failures. Determining the root cause by analyzing the flaws. Repairing flaws, so they don’t compromise the quality of the final output. Reporting software flaws to developers using a bug tracking system (e.g., Bugzilla, Mantis, QA Touch). Early testing to remove deficiencies at an early stage lowers the cost and duration of bug fixes.
What is the lifecycle of a Quality Assurance Process?;QA follows a PDCA lifecycle: i. Plan The organization specifies the procedures needed to create a software product of the highest caliber during the planning phase of the Quality Assurance process. ii. Do Do is a stage in which the procedures are developed and tested. iii. Check This stage is intended to monitor the operations and determine whether they adhere to the users’ needs. iv. Act The Act is a step in putting the necessary procedures into action.
Differentiate between Test Plan and Test Strategy.;Test Plan:A test plan for software projects is a document that outlines the goal, strategy, approach, and emphasis of a software testing effort.A testing manager or lead executes a test plan that specifies how, when, and what to test. The test plan describes the specification. The test plan may alter. The Test approach is a long-term action plan.Test plan can be an individual plan. Test Strategy: A test strategy is a set of rules that specifies test design and how testing must be carried out. The project manager implements a test strategy. It explains the kind of methodology to use and the module to test. Test strategy describes the general methods. There is no way to adjust the test strategy. Test planning aims to detect risks by identifying potential problems and dependencies. Non-project-specific information can be abstracted and applied to test strategy. The test strategy element of a test plan is frequently encountered in smaller projects.
Explain What is Build and Release. Differentiate Between Them.;Build: The development team provides the test team with a “build.” The test team may reject it if any tests fail or a “build” does not satisfy the requirements. Multiple builds comprehend to a single release. Release: A product’s official release to customers is called a “release.” Customers receive a build when it has been “released” after being tested and approved by the test team.
What Do You Understand About Bug Leakage and Bug Release?;Bug leakage: A bug leak occurs when the bug is missed in previous builds or versions of the application. A bug leakage is a fault that happens while testing but is discovered later by the tester or end-user. Bug release: A bug release occurs when a specific software version is released with several known bugs or defects. Usually, the Release Notes make mention of these bugs. These bugs are frequently of low priority and low severity. When the business can afford it, it is decided to leave the bug in the deployed software rather than spend time and money correcting it in that specific version.
What Do You Mean by Monkey Testing?;In software development, The effectiveness of an application is tested through monkey testing. “Monkey testing” involves a tester randomly inputting data into the program with no intention of crashing it. By supplying arbitrary inputs and attempting to break the program, it is appropriate for load testing. Some flaws might not always be discovered using conventional methods at regular intervals. These problems are more likely to be found if random inputs are provided. This method is used to uncover bugs not typically encountered by conventional methods and is applied to the entire system.
What Do You Mean by Gorilla Testing?;Gorilla testing meticulously tests every last bit of code until it fails using arbitrary inputs, whereas the resilience of an application is tested rigorously by hand. The main difference between Gorilla and Monkey testing is that the former tests specific modules, whereas the latter evaluates the entire system. Random valid and invalid inputs are supplied into each product’s modules until a module crashes. This phase is carried out for each module in the last phases of the software development cycle to test the robustness of the application. It is also known as “torture testing” or “fault tolerance testing” because it is rigorous.
Explain Testware.;Testware refers to the artifacts created during the testing process needed to plan, design, and carry out tests. Documentation, scripts, inputs, anticipated outcomes, setup and teardown methods, files, databases, environments, and other software or utilities needed in testing are considered testware. Testware is considered a testing tool that is adequately saved and controlled by a configuration management tool. Testware differs from regular software in two ways: It is created by testers for a specific objective. It has multiple users and various quality measures.
What is a traceability matrix?;The Traceability matrix is a specific kind of document used in software development projects to track, identify, and confirm the development of a particular capability or component. Aids in connecting and tracing business, application, security, and other requirements to their execution, testing, or completion. It assesses and compares various system components and gives information on the state of the project’s needs in terms of their degree of completion. A worksheet-style document with a table typically serves as a traceability matrix. An identifier for one group is placed in the top row, and an identification for the other set is placed in the left column to compare the two sets of values. A mark is made if there is a similarity or a connection.
What is the Quality Audit?;In software testing, the audit compares a software product to predefined standards, and the desired standard is the primary goal of conducting an audit of a software testing phase. Quality Audit determines if the process being utilized and implemented in the testing process is defined and specifications to ensure the generated product complies with them.
What Do You Know About the Defect Leakage Ratio?;Defect Leakage is a metric used to measure how well QA testing is done or how many problems get overlooked. Formula to find the defect leakage ratio: Defect Leakage = (No. of Defects Found in UAT / No. of Defects Found i
Describe the Different Forms of Software Quality Assurance Documentation.;i. Test policy: is a high-level document outlining the organization’s fundamental testing principles, methodologies, and critical testing objectives. ii. Testing strategy: The testing strategy outlines the test levels (types) used for the project. iii. Test plan: A test plan is an all-inclusive planning document (often formatted as a digital flipbook or interactive PDF) that includes information about the purpose, strategy, available tools, schedule, and other testing activities. iv. Requirements Traceability Matrix: The requirements and test cases are related to this document. v. Test scenario: A software system’s test scenario is a component or occurrence that one or more test cases could confirm. vi. Test case: It is a collection of input values, expected postconditions for the execution, and results. vii. Test Data: Test Data is information present before a test is run. viii. Defect Report: A defect report is a written description of any error in a software system that prevents it from operating as intended. ix. Test summary report: A high-level test summary report outlines the testing operations and test results.
Explain the Rule of a “Test Driven Development?“;The QA’s may write no production code until it is required to pass a failing unit test. Compilation failures count as failures, and you are only permitted to write as much of a unit test as is necessary to fail. The QA’s may write only the production code required to pass the one failed unit test.
What is a Cause-Effect Graph?;The cause-effect graph is an inclusion of a black box testing technique that identifies the fewest test cases that can adequately test the full scope of the product, Based on a set of criteria. It also highlights the connection between a particular result and the elements influencing the outcome. The real benefit of cause-effect graph testing is the reduced test execution time and cost.
What is Thread Testing?;Thread testing is a type of software testing that examines the core functional capabilities of a given task (thread). It is one of the incremental techniques often done at the beginning of system integration testing.
What are the Five Dimensions of Risk?;The five dimensions of risk are as follows: i. Schedule: Unrealistic timelines, such as building a large piece of software in a single day. ii. Client: Unclear requirements, changing requirements, and ambiguous requirements descriptions. iii. Human Resource: Lack of sufficient resources with the required expertise for the project. iv. System assets: An unfavorable outcome will result from the inability to acquire all necessary resources, including hardware and software tools or licenses. v. Quality: Product quality will be impacted by multiple factors, such as a lack of resources, a strict delivery timetable, and frequent modifications.
What Do You Understand About Regression Testing? Which Test Cases Should be Selected for this Process?;Regression testing is testing performed to ensure that a software update won’t impact how the product currently operates. Practical regression tests may use the test cases listed below: If features are apparent, users can see more of them. Scenarios that examine the core properties of the product Case studies of functionality that have undergone significant and recent changes Every Integration Test Case All Comprehensive Test Cases Examples of boundary value tests A variety of failure test case examples
Distinguish Between Severity and Priority.;Severity: The degree to which a specific flaw can affect the software is known as its severity. The parameter of “severity” describes how the defect affects the software’s functionality. Priority: A characteristic that determines the sequence in which a defect should be addressed is called a priority. The first defect that needs to be corrected is the one with the highest importance.
What is the Difference Between Functional and Non-Functional Testing?;Functional Testing: Functional testing validates each software function or feature. Functional testing focuses on the client’s needs. Functional testing aims to validate program actions. Functional testing example would be to verify the login process. Functional describes what the product performs, whereas Non-Functional describes how the product operates. Functional testing is conducted before nonfunctional testing. Non-Funtional Testing: Non-functional testing validates nonfunctional elements, including performance, usability, and reliability. Non-functional testing is challenging to execute manually. non-functional testing is based on the customer’s expectations. Non-functional testing confirms software performance. Non-functional testing example would ascertain that the dashboard should load within two seconds. Non-functional testing is performed after functional testing.
How Do You Decide When to Stop Testing?;Sometimes, as project managers or project leads, we may have to cancel testing to launch the product sooner. In those circumstances, we must determine whether the product has received sufficient testing from the testers. When deciding when to halt testing in real-time projects, various considerations must be taken into account: If the testing or release deadlines are met. By entering the determined test case pass rate. If the risk in the real-time project is below the permitted level. If all the critical bugs and roadblocks have been resolved. If the submission meets the requirements.
Differentiate Between Load Testing And Stress Testing.;The purpose of each is what makes a difference: Through load testing, you can learn how a system responds to a predicted load. Stress testing enables you to comprehend the maximum loads at which a system can function. In other words, stress tests show you how a system might respond to heavy demand, such as a DDoS attack, the Slashdot effect, or different scenarios. In this manner, you might be ready for unforeseen occurrences. On the other hand, load tests ensure you fulfill user expectations, such as service level agreement (SLA) obligations. So instead of breaking the application, the objective is to guarantee a satisfactory overall user experience. It enables you to deploy new code with assurance.
What is Ad-hoc Testing?;Adhoc testing is a causal method of software testing. It does not adhere to established procedures such as test plans, test cases, and requirement documentation. Adhoc testing has the following traits: It is done on an application after formal testing is finished. Its primary goal is to malfunction the program without a predetermined procedure. Adhoc testers should be well knowledgeable about the product they are testing.
What is a Bug Life Cycle?;The status of a new defect, is set to New when it is initially logged and posted. ii. Assigned After the tester posts a bug, the tester’s lead reviews the bug and designates it for the developing team. iii. Open The developer gets to work on the defect fix and analysis. iv. Fixed A developer may mark an issue as fixed once the required code modifications have been made and verified. v. Retest The tester retests the code to see if the developer has fixed the issue. If not, then the status is changed to retest. vi. Reopen Once the developer has fixed the bug, but it still exists, the tester switches the status to Reopen, and the bug runs through the bug life cycle. vii. Verified After the developer has corrected the bug, the tester retests it if no bugs are discovered, the status is changed to Verified. viii. Closed The status is changed to Closed if the bug is no longer present. ix. Duplicate The status is changed to Duplicate if the defect occurs twice or if it shares the same concept as the prior problem. x. Rejected The status is changed to Rejected if the developer believes the flaw is not there. xi. Deferred If the bug can be patched in the upcoming release and does not have a higher priority, the status becomes Deferred.
What Do You Understand About Bug/ Defect Triage in the Context of Quality Assurance?;Software testing generally employs Defect Triage, commonly referred to as Bug Triage. It is necessary to describe the faults’ importance and seriousness. The severity of a problem is determined by how it affects the application being tested. Priority is the sequence in which a flaw must be corrected or resolved. Defect triage is essentially a method that aims to rebalance the process, which is typically problematic for the test team due to a lack of necessary resources. Defects are usually prioritized in defect triage based only on their severity, likelihood of recurrence, and risk.
What is your approach to test planning? Compare test plan vs test strategy;Waterfall vs. Agile testing Waterfall or Agile, choosing between the two really depends on what will work for a team. Agile is meant to address the demand of higher iteration and deployment frequency. But if a team only requires releasing new code every once in a while, say a month, then Waterfall sequential and linear testing would still make sense. The same applies for risk-based, model-based, hybrid or other approaches. Test plan vs. test strategy A test plan outlines what to be done to execute a test strategy. A test strategy sets the high-level direction with different tactics and plans. Since it’s giving a high-level overview, a test strategy will be applied across products and releases to standardize how quality engineering will be done. On the contrary, a test plan goes a level lower to give more on the details of things like testing types, tools and timelines.
What is exploratory testing?;Exploratory testing is a testing approach that involves simultaneous learning, test design, and execution. It is employed when there is no formalized test plan or script, and when there is a need to discover issues not yet covered by existing test cases. Exploratory testing is typically performed by experienced testers who use their domain knowledge, intuition, and creativity to identify defects in the software.
Explain stress testing, load testing and volume testing?;Stress testing, load testing, and volume testing are all non-functional testing types used to assess the performance of an application under real-world scenarios. Stress testing puts the application under extreme conditions beyond the normal operating parameters. It aims to identify the breaking point of the system and how it behaves when it reaches its limits. Testers gradually increase the load on the application beyond its normal capacity until it fails or by creating a sudden spike in the load to see how the system responds. The insights from stress testing sessions allow the developers to better manage damage to the system when issues occur. Load testing involves testing the application under varying levels of normal user load to determine how well the system can handle normal amounts of traffic. Load testing helps to identify performance bottlenecks, such as slow response times, high CPU usage, and memory leaks. Volume testing involves testing the application with a large amount of data to determine how well it can handle data processing. It aims to identify performance issues such as slow response times, data corruption, and data loss that may occur when the application is processing a large amount of data.
What is the difference between TDD vs BDD?;TDD is a development approach to drive software testability. BDD is also a development approach, but drives the design of software via an end-user’s perspective. Test driven development or TDD aims to ensure code testability by knowing exactly what you want your software to do. Some existing codebase was not designed with testing in mind, leading to less maintainable code and fear of refactoring. And no, TDD isn’t entirely dictating the structure of code. Instead, this methodology wants to use software tests to influence well thought out software implementation as opposed to just banging out code. BDD prescribes a more effective approach to testing by communicating technical slangs and concepts into easy-to-understand English. It’d be impossible to not have any business stakeholders like clients or product managers in software projects.
What is performance testing?;Performance testing evaluates the system's performance (i.e. responsiveness, scalability, stability, and speed) under varying workload conditions. Its goal is to determine how the application behaves under normal and peak usage scenarios, such as high user traffic, large data volumes, or simultaneous user interactions. The results of performance testing will be used to identify and resolve bottlenecks, optimize system performance, and enhance the user experience.
What is accessibility testing?;Accessibility testing is the process of evaluating a software application or website's usability for all users, including people with disabilities, such as visual, auditory, motor, and cognitive impairments. It tests the app’s compatibility with assistive technologies such as screen readers, magnifiers, and voice recognition software.
Explain end to end testing in your own words. Compare End to End Testing vs Integration Testing;End-to-end testing evaluates the entire application flow from start to finish, to ensure that all integrated components of the software system work together as expected. Integration testing looks at how individual integrated components, from the API to UI, work. The test pyramid is always the best theory to refer back to 3 test levels: unit, integration and end-to-end testing.
How do you perform visual testing?;Visual testing can be performed manually, where the tester checks the application visually for inconsistencies. This can be time-consuming and prone to human error. Many testers employ the Image Comparison technique, which involves capturing screenshots of the UI elements in a baseline state, then comparing them with screenshots of the actual UI to see if there are any unintended visual changes. However, even this approach is not the best. There are so many factors that may cause false positives in visual testing. Using visual testing tools can reduce false positives and make the process more efficient.
How do you prioritize test cases for execution?;There are many criteria to consider when prioritizing test cases for execution. Below is a list of 9 most common criteria QA professionals use: Business impact: test cases that are verify critical flows (e.g., Login, Checkout) Risk (test cases of high-risk areas in the app) Frequency of use (test cases for features used by large numbers of users) Dependencies Complexity Customer or user feedback (test cases that address customers’ pain points) Compliance requirements (test cases covering regulations specific to the industry) Historical data (test cases that have historically resulted in defects or issues) Test case age (old test cases may require updates and maintenance)
What are the key components of a good test case?;Know when manual or automated testing would be best. Use appropriate design method (e.g., data-driven testing) for different requirements and scenarios. Test cases should be designed to be scalable and reusable, so that they can be leveraged across different testing cycles or projects to save time and effort. Each test case should have a unique identifier or name to make it easy to reference and filter for regression testing Test data inputs should cover happy and negative inputs to uncover edge cases Tests should run on environments (browser, device and operating system) that end-users use the most They should be stored in a centralized repository or test management tool to allow for easy access, maintenance, and reporting. QA testers should design independent test cases, so that the execution of one test case does not impact the results of another.
What are defect triage meetings?;Defect triage meetings are used to prioritize and assign defects to the appropriate team members. During defect triage meetings, QA testers present the defects identified during testing, including their severity and priority, and discuss the potential impact of the defects on the project.
Explain API Testing and show your approach to API Testing;API testing is key because almost every application type is heavily reliant on APIs. The UI and API are interlaced, making it even more critical to understand how data and logic processes from one layer to the other. Here are what to consider when designing an API test: Read the API documentation: understand the specifications for functionalities and technologies of the APIs to write test cases with clear objectives Architectural style: schemas written in REST, GraphQL and SOAP differ in concepts and implementation which makes testing them different as well Automate data-driven tests: let API flows parse through various data types, formats, structures, and scenarios End-points management: avoid duplicating or missing scenarios by grouping API/web services endpoints
How do you ensure that test cases are comprehensive and cover all possible scenarios?;Although it is not always feasible to cover ALL possible scenarios, testers should try to venture beyond the happy path i.e. testing the app under normal conditions. Apart from the common test cases, QA testers also need to consider edge cases, and negative scenarios, which are test scenarios that involve unusual or unexpected inputs or usage patterns. Attackers are more likely to exploit non-standard scenarios, so including such scenarios in your test plan is a great way to improve test coverage.
What is your approach to identifying and reporting defects?;Many QA testers follow these steps to identify and report newly found defects: Replicate the defect and gather relevant information such as steps to reproduce, screenshots, logs, and system configurations. Assign a severity level to the defect based on its impact on the application and users. Log the defect in a tracking tool with a clear description, expected vs. actual results, and steps to reproduce. Communicate the defect to the development team and collaborate with them to identify the root cause and potential solutions. Continuously follow up on the defect until it is resolved and verified to be fixed.
How do you measure the effectiveness of your testing efforts?;There are several testing metrics to consider: Test case execution rate Test coverage Defect density Defect rejection rate Mean time to failure (MTTF)
What are test management tools?;Test management tools are used by testing teams to manage and organize their testing activities. These tools provide features to manage test cases, test plans, test execution, and test reporting.
What is your experience with implementing an automation testing tool?;Identify areas for automation testing and prioritize them based on impact Evaluate and select appropriate automation testing tool based on technical requirements Define KPIs and success criteria for automation testing and establish continuous monitoring and reporting mechanism Train testing team on automation tool and test plan and establish necessary governance, policies, and procedures Track automation testing tool effectiveness and make adjustments if needed
How do you manage your QA team?;This question is designed to learn more about your management style. Not just in QA, managers in any industry need to have good communication skills, empathy to understand diverse perspectives, good leadership skills to connect a diverse group of testers together, and have accountability for the performance of the whole team.
What is the difference between the QA and software testing?;The role of QA (Quality Assurance) is to monitor the quality of the “process” used to produce the software. While the software testing, is the process of ensuring the functionality of final product meets the user’s requirement.
What is Testware?;Testware is test artifacts like test cases, test data, test plans needed to design and execute a test.
What is the difference between build and release?;Build: It is a number given to Installable software that is given to the testing team by the development team. Release: It is a number given to Installable software that is handed over to the customer by the tester or developer.
What are the automation challenges that SQA(Software Quality Assurance) team faces while testing?;Mastering the automation tool, Reusability of Automation script, Adaptability of test case for automation, Automating complex test cases.
What is bug leakage and bug release?;ug release is when software or an application is handed over to the testing team knowing that the defect is present in a release. During this the priority and severity of bug is low, as bug can be removed before the final handover. Bug leakage is something, when the bug is discovered by the end users or customer, and not detected by the testing team while testing the software.
What is data driven testing?; Data driven testing is an automation testing framework, which tests the different input values on the AUT. These values are read directly from the data files. The data files may include csv files, excel files, data pools and many more.
What does the test strategy include?; The test strategy includes an introduction, resource, scope and schedule for test activities, test tools, test priorities, test planning and the types of test that has to be performed.
What is branch testing and what is boundary testing?; The testing of all the branches of the code, which is tested once, is known as branch testing. While the testing, that is focused on the limit conditions of the software is known as boundary testing.
What is Agile testing and what is the importance of Agile testing?; Agile testing is software testing, is testing using Agile Methodology. The importance of this testing is that, unlike normal testing process, this testing does not wait for the development team to complete the coding first and then doing testing. The coding and testing both goes simultaneously. It requires continuous customer interaction.
What is Test case?; Test case is a specific condition to check against the Application Under Test. It has information of test steps, prerequisites, test environment, and outputs.
What is quality audit?; The systematic and independent examination for determining the effectiveness of quality control procedures is known as the quality audit.
What is a ‘USE’ case and what does it include?; The document that describes, the user action and system response, for a particular functionality is known as USE case. It includes revision history, table of contents, flow of events, cover page, special requirements, pre-conditions and post-conditions.
What is CRUD testing and how to test CRUD?; CRUD stands for Create, Read, Update and Delete. CRUD testing can be done using SQL statements.
What is a cause effect graph?;A cause effect graph is a graphical representation of inputs and the associated outputs effects that can be used to design test cases.
Explain what is traceability matrix?;A test matrix is used to map test scripts to requirements.
Mention what are the types of documents in SQA?;The types of documents in SQA are:Requirement Document, Test Metrics, Test cases and Test plan, Task distribution flow chart, Transaction Mix, User profiles, Test log, Test incident report, Test summary report
Explain what should your QA documents include?;QA testing document should include: List the number of defects detected as per severity level, Explain each requirement or business function in detail, Inspection reports, Configurations, Test plans and test cases, Bug reports, User manuals, Prepare separate reports for managers and users
Explain what is MR and what information does MR consists of?;MR stands for Modification Request also referred as Defect report. It is written for reporting errors/problems/suggestions in the software.
What should the Software QA document include?;Software QA document should include:Specifications,Designs,Business rules,Configurations,Code changes,Test plans,Test cases,Bug reports,User manuals, etc
How would you manage a testing issue?;This question attempts to uncover how you might handle problems during your testing, which may include manual testing, automation testing, and test strategies. The interviewer might like to hear about how you manage issues with the software test itself. Explain to the interviewer what your general steps may include before asking your supervisor. Example: "Depending on the issue, I may rerun my test to ensure the testing was being implemented correctly. If the problem persisted, I can then restart the software and testing environment to make sure everything was working on the testing side. If problems persisted after a couple of minutes, I may talk to my supervisor or manager so I can manage my time wisely."
What are the steps of an automation test plan?;While the individual automation test plans differ from company to company, an interviewer may want to understand your knowledge of implementing an automation test and what steps you may include. Your answer can allow you to highlight your extensive experience in managing a software automation test. Example: "I would follow the company's strategy and record the scenario while incorporating an error handler. I would then debug the script and fix the issues as needed, rerun the script and track the results of the fix."
Have you ever written test cases without documents?;Your answer to this question depends on whether or not you have written test cases without documents. If you have, explain your prior experience in writing test cases. When you lack experience with writing test cases without documents, you can still explain what your process may include and how they align with quality standards. Example: "Yes, sometimes there aren't any documents. When this happened before, I looked into past tests or performed minor research to get an idea of the feature being implemented. If the information was limited, I contacted someone from the development team to understand the changes, and in some cases, I collaborated with one of the developers."
What is the difference between load testing, volume testing and stress testing?;There are many types of software testing, and these three types of testing are the most common among software testers and quality assurance engineers. It's important for your answer to show the interviewer that you have legitimate experience in multiple types of software testing and understand the difference between them all. Example: "Load testing is when you test the software under a heavier load that is still in the expected range, whereas stress testing is when you test the software under a much heavier load that goes outside the expected range. This type of testing proves if the system can handle errors while heavily loaded. Volume testing, also known as flood testing, is just a system check to find out if the software can manage the expected data or requests."
What is a bug?;A bug is any kind of error, mistake or failure in software code that prevent the software function from executing properly.
What is the difference between severity and priority?;These are important distinctions that must be known for proper time management. Severity is how difficult the issue is to fix. Priority is how important the issue is to fix. Just because an issue is high severity doesn’t necessarily mean it’s high priority and vice versa. Here’s an example of a high-severity, low-priority issue: The application crashes when a rarely used function is run on legacy software that most users can’t access. Here’s an example of a low-severity, high-priority issue: The wrong company logo is displayed on startup.
When should QA start?;QA should begin as soon as possible. The earlier QA analysts, QA testers, and QA team leads get involved in the process the more headaches are prevented later in the software development cycle. Static tests can be performed before the software is fully functional.
What is a test plan?;A test plan is a document that outlines the details of the intended test. It states before testing begins the required roles, potential risks and solutions, and resources it will use.
What is a Test Strategy?;The test strategy outlines the plan for the testing stage of software development. Unlike the test plan, which describes one specific test, the test strategy covers the entire testing phase of development and includes a description of the testing tools, test groups, test priorities, test record maintenance, and the test summary.
What are some different kinds of testing?;Regression testing, exploratory testing, functional testing, load testing, integration testing, unit testing, cross-browser testing white box testing, black box testing, volume testing, alpha testing, beta testing, and so many more.
What is a good test case?;A good test case clearly states the parameters in which the test will be performed and the bugs it hopes to find.
When you find a bug in production, how do you ensure the bug gets resolved?;The best course of action is to immediately write a test case for the bug and run a regression test. That way any future tests performed on the software should check specifically for that bug.
How do you prioritize when you have so many tasks?;Think about how you’ve approached busy moments in the past. Are you a strict scheduler? Or do you prefer budgeting your time more loosely, allowing room to adapt to sudden issues? Again, these testing interview questions are more about determining whether you’re a good personality fit for their team.
What is software testing?;Software testing is a process to assess the quality, functionality, and performance of a software product before it is launched. Testers carry out this process either by interacting with the software manually or running test scripts to automatically check for bugs and errors, ensuring that the software functions as intended. Additionally, software testing is conducted to verify the fulfillment of business logic and identify any gaps in requirements that require immediate attention.
Explain the Software Testing Life Cycle (STLC);The Software Testing Life Cycle (STLC) is a systematic process that QA teams follow when conducting software testing. The stages in an STLC are designed to achieve high test coverage, while maintaining test efficiency.  There are 6 stages in the STLC: 1. Requirement Analysis: During this stage, software testers collaborate with stakeholders in the development process (developers, business analyst, clients, product owner, etc.) to identify and comprehend test requirements. The information gathered from this discussion is compiled into the Requirement Traceability Matrix (RTM) document. This document is the foundation of the test strategy. 2. Test Planning: from a comprehensive test strategy, we develop a test plan, in which details about objectives, approach, scope of the testing project, test deliverables, dependencies, environment, risk management, and schedule are noted down. It is a more granular version of the test strategy. 3. Test Case Development: Depending on whether teams want to execute the tests manually or automatically, we’ll have different approaches to this stage. Certain test cases are more suitable to be executed manually, while some should be automated to save time. Generally, in manual testing, testers write down the specific steps of the test case in a spreadsheet and document the results there, while in automated testing, the test case is written as a script using a test automation framework like Selenium. 4. Environment Setup: QA teams set up the hardware-software-network configuration to conduct their testing based on their plan. There are many environments to run a test on, either locally, remotely, or on cloud. 5. Test Execution: The QA team prepares test cases, test scripts, and test data based on clear objectives. Tests can be done manually or automatically. Manual testing is used when human insights and judgment are needed, while automation testing is preferred for repetitive flows with minor changes. Defects found during testing are tracked and reported to the development team, who promptly address them. 6. Test Cycle Closure: This is the last stage of Software Testing. Software testers will come together to examine their findings from the tests, assess how well they worked, and record important lessons to remember in the future. It's important to regularly assess your QA team's software testing procedure to maintain control over all testing activities throughout the STLC phases.
Define the term "test plan" and describe its components.;A test plan is like a detailed guide for testing a software system. It tells us how we'll test, what we'll test, and when we'll test it. The plan covers everything about the testing, like the goals, resources, and possible risks. It makes sure that the software works well and is of good quality.
What is the purpose of the traceability matrix in software testing?;The traceability matrix in software testing is a crucial document for ensuring comprehensive test coverage and establishing a clear link between various artifacts throughout the software development and testing life cycle. Its primary purpose is to trace and manage the relationships between requirements, test cases, and other relevant artifacts.
Explain the differences between static testing and dynamic testing. Provide examples of each.;Static testing involves reviewing and analyzing software artifacts without executing the code. Examples of static testing include code reviews, inspections, and walkthroughs. Dynamic testing involves executing the code to validate its behavior. Examples of this type include unit testing, integration testing, and system testing.
Does Python allow you to program in a structured style?;Yes., Python allows to code in a structured as well as Object-oriented style. It offers excellent flexibility to design and implement the application code depending on the requirements of the application.
What is PIP software in the Python world?;PIP stands for Python Installer Package, which provides a seamless interface to install the various Python modules. It is a command-line tool that searches for packages over the Internet and installs them without any user interaction.
What should be the typical build environment for Python-based application development?;The best and easiest tool used to “unit test” is the python standard library, which is also used to test the units/classes. Its features are similar to the other unit testing tools such as JUnit, TestNG.
How does for Loop and while Loop differs in Python and when do you choose to use them?;“for” Loop is generally used to iterate through the elements of various collection types such as List, Tuple, Set, and Dictionary. Developers use a “for” loop where they have both the conditions start and the end. “while” loop is the actual looping feature that is used in any other programming language. Developers use a while loop where they just have the end conditions. This is how Python differs in handling loops from the other programming languages.
How do you make use of Arrays in Python?;Python does not have in-built data structures like arrays, and it does not support arrays. However, you can use List which can store an unlimited number of elements.
What is the best way to parse strings and find patterns in Python?;Python has built-in support to parse strings using the Regular expression module.
Which databases are supported by Python?;MySQL (Structured) and MongoDB (Unstructured) are the prominent databases that are supported natively by Python. Import the module and start using the functions to interact with the database.